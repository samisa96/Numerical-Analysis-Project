import numpy as np
from sympy import *
from pypoly import Polynomial

def chunkIt(seq, num):
    avg = len(seq) / float(num)
    out = []
    last = 0.0
    while last < len(seq):
        out.append(seq[int(last):int(last + avg)])
        last += avg
    return out

def product(list):
    p = 1
    for i in list:
        p *= i
    return p
def printLagrange(X):
    x = Symbol('x')
    for i in range(len(X)):
        print(X[i][1], "*", end = " ")
        for j in range(len(X) - 1):
            if i != j:
                print("(",x , "-",  X[j][0], ")/(",X[j][0], "-", X[j + 1][0], ")" , end = "")


        print(" + ", end = "")


def Lagrange(x,X):
    T = np.zeros((2,len(X)))
    list = []
    for i in range(len(X)):
        for j in range(len(X)):
            if i != j:
                list.append((x-X[j][0])/(X[i][0]-X[j][0]))
    p = []
    for i in chunkIt(list,len(X)):
        p.append(product(i))
    for i in range(len(X)):
        T[0][i] = p[i]
        T[1][i] = X[i][1]

    list2 = []
    for i in range(len(X)):
        list2.append(T[0][i]*T[1][i])
    return sum(list2)

x, X = 0.35, [[0.2,0.198669],[0.3,0.295520],[0.4,0.389418],[0.5, 0.479426]]

printLagrange(X)
